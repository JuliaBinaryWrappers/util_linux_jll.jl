# Autogenerated wrapper script for util_linux_jll for armv7l-linux-musleabihf
export addpart, agetty, blkdiscard, blkid, blkzone, blockdev, cal, chcpu, chmem, choom, chrt, col, colcrt, colrm, column, ctrlaltdel, delpart, dmesg, eject, fallocate, fdformat, fdisk, fincore, findfs, findmnt, flock, fsck, fsck_cramfs, fsck_minix, fsfreeze, fstrim, getopt, hardlink, hexdump, hwclock, ionice, ipcmk, ipcrm, ipcs, isosize, kill_bin, last_bin, ldattach, libblkid, libfdisk, libmount, libsmartcols, libuuid, logger, look, losetup, lsblk, lscpu, lsipc, lslocks, lslogins, lsmem, lsns, mcookie, mesg, mkfs, mkfs_bfs, mkfs_cramfs, mkfs_minix, mkswap, mount, mountpoint, namei, nologin, nsenter, partx, pivot_root, prlimit, raw, readprofile, rename_bin, renice, resizepart, rev, rfkill, rtcwake, script, scriptlive, scriptreplay, setarch, setsid, sfdisk, sulogin, swaplabel, swapoff, swapon, switch_root, taskset, umount, unshare, utmpdump, uuidd, uuidgen, uuidparse, wall, wdctl, whereis, wipefs, zramctl

using Gettext_jll
using Zlib_jll
## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"
LIBPATH_default = ""

# Relative path to `addpart`
const addpart_splitpath = ["sbin", "addpart"]

# This will be filled out by __init__() for all products, as it must be done at runtime
addpart_path = ""

# addpart-specific global declaration
function addpart(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(addpart_path)
    end
end


# Relative path to `agetty`
const agetty_splitpath = ["sbin", "agetty"]

# This will be filled out by __init__() for all products, as it must be done at runtime
agetty_path = ""

# agetty-specific global declaration
function agetty(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(agetty_path)
    end
end


# Relative path to `blkdiscard`
const blkdiscard_splitpath = ["sbin", "blkdiscard"]

# This will be filled out by __init__() for all products, as it must be done at runtime
blkdiscard_path = ""

# blkdiscard-specific global declaration
function blkdiscard(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(blkdiscard_path)
    end
end


# Relative path to `blkid`
const blkid_splitpath = ["sbin", "blkid"]

# This will be filled out by __init__() for all products, as it must be done at runtime
blkid_path = ""

# blkid-specific global declaration
function blkid(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(blkid_path)
    end
end


# Relative path to `blkzone`
const blkzone_splitpath = ["sbin", "blkzone"]

# This will be filled out by __init__() for all products, as it must be done at runtime
blkzone_path = ""

# blkzone-specific global declaration
function blkzone(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(blkzone_path)
    end
end


# Relative path to `blockdev`
const blockdev_splitpath = ["sbin", "blockdev"]

# This will be filled out by __init__() for all products, as it must be done at runtime
blockdev_path = ""

# blockdev-specific global declaration
function blockdev(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(blockdev_path)
    end
end


# Relative path to `cal`
const cal_splitpath = ["bin", "cal"]

# This will be filled out by __init__() for all products, as it must be done at runtime
cal_path = ""

# cal-specific global declaration
function cal(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(cal_path)
    end
end


# Relative path to `chcpu`
const chcpu_splitpath = ["sbin", "chcpu"]

# This will be filled out by __init__() for all products, as it must be done at runtime
chcpu_path = ""

# chcpu-specific global declaration
function chcpu(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(chcpu_path)
    end
end


# Relative path to `chmem`
const chmem_splitpath = ["bin", "chmem"]

# This will be filled out by __init__() for all products, as it must be done at runtime
chmem_path = ""

# chmem-specific global declaration
function chmem(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(chmem_path)
    end
end


# Relative path to `choom`
const choom_splitpath = ["bin", "choom"]

# This will be filled out by __init__() for all products, as it must be done at runtime
choom_path = ""

# choom-specific global declaration
function choom(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(choom_path)
    end
end


# Relative path to `chrt`
const chrt_splitpath = ["bin", "chrt"]

# This will be filled out by __init__() for all products, as it must be done at runtime
chrt_path = ""

# chrt-specific global declaration
function chrt(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(chrt_path)
    end
end


# Relative path to `col`
const col_splitpath = ["bin", "col"]

# This will be filled out by __init__() for all products, as it must be done at runtime
col_path = ""

# col-specific global declaration
function col(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(col_path)
    end
end


# Relative path to `colcrt`
const colcrt_splitpath = ["bin", "colcrt"]

# This will be filled out by __init__() for all products, as it must be done at runtime
colcrt_path = ""

# colcrt-specific global declaration
function colcrt(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(colcrt_path)
    end
end


# Relative path to `colrm`
const colrm_splitpath = ["bin", "colrm"]

# This will be filled out by __init__() for all products, as it must be done at runtime
colrm_path = ""

# colrm-specific global declaration
function colrm(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(colrm_path)
    end
end


# Relative path to `column`
const column_splitpath = ["bin", "column"]

# This will be filled out by __init__() for all products, as it must be done at runtime
column_path = ""

# column-specific global declaration
function column(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(column_path)
    end
end


# Relative path to `ctrlaltdel`
const ctrlaltdel_splitpath = ["sbin", "ctrlaltdel"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ctrlaltdel_path = ""

# ctrlaltdel-specific global declaration
function ctrlaltdel(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ctrlaltdel_path)
    end
end


# Relative path to `delpart`
const delpart_splitpath = ["sbin", "delpart"]

# This will be filled out by __init__() for all products, as it must be done at runtime
delpart_path = ""

# delpart-specific global declaration
function delpart(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(delpart_path)
    end
end


# Relative path to `dmesg`
const dmesg_splitpath = ["bin", "dmesg"]

# This will be filled out by __init__() for all products, as it must be done at runtime
dmesg_path = ""

# dmesg-specific global declaration
function dmesg(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(dmesg_path)
    end
end


# Relative path to `eject`
const eject_splitpath = ["bin", "eject"]

# This will be filled out by __init__() for all products, as it must be done at runtime
eject_path = ""

# eject-specific global declaration
function eject(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(eject_path)
    end
end


# Relative path to `fallocate`
const fallocate_splitpath = ["bin", "fallocate"]

# This will be filled out by __init__() for all products, as it must be done at runtime
fallocate_path = ""

# fallocate-specific global declaration
function fallocate(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(fallocate_path)
    end
end


# Relative path to `fdformat`
const fdformat_splitpath = ["sbin", "fdformat"]

# This will be filled out by __init__() for all products, as it must be done at runtime
fdformat_path = ""

# fdformat-specific global declaration
function fdformat(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(fdformat_path)
    end
end


# Relative path to `fdisk`
const fdisk_splitpath = ["sbin", "fdisk"]

# This will be filled out by __init__() for all products, as it must be done at runtime
fdisk_path = ""

# fdisk-specific global declaration
function fdisk(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(fdisk_path)
    end
end


# Relative path to `fincore`
const fincore_splitpath = ["bin", "fincore"]

# This will be filled out by __init__() for all products, as it must be done at runtime
fincore_path = ""

# fincore-specific global declaration
function fincore(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(fincore_path)
    end
end


# Relative path to `findfs`
const findfs_splitpath = ["sbin", "findfs"]

# This will be filled out by __init__() for all products, as it must be done at runtime
findfs_path = ""

# findfs-specific global declaration
function findfs(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(findfs_path)
    end
end


# Relative path to `findmnt`
const findmnt_splitpath = ["bin", "findmnt"]

# This will be filled out by __init__() for all products, as it must be done at runtime
findmnt_path = ""

# findmnt-specific global declaration
function findmnt(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(findmnt_path)
    end
end


# Relative path to `flock`
const flock_splitpath = ["bin", "flock"]

# This will be filled out by __init__() for all products, as it must be done at runtime
flock_path = ""

# flock-specific global declaration
function flock(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(flock_path)
    end
end


# Relative path to `fsck`
const fsck_splitpath = ["sbin", "fsck"]

# This will be filled out by __init__() for all products, as it must be done at runtime
fsck_path = ""

# fsck-specific global declaration
function fsck(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(fsck_path)
    end
end


# Relative path to `fsck_cramfs`
const fsck_cramfs_splitpath = ["sbin", "fsck.cramfs"]

# This will be filled out by __init__() for all products, as it must be done at runtime
fsck_cramfs_path = ""

# fsck_cramfs-specific global declaration
function fsck_cramfs(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(fsck_cramfs_path)
    end
end


# Relative path to `fsck_minix`
const fsck_minix_splitpath = ["sbin", "fsck.minix"]

# This will be filled out by __init__() for all products, as it must be done at runtime
fsck_minix_path = ""

# fsck_minix-specific global declaration
function fsck_minix(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(fsck_minix_path)
    end
end


# Relative path to `fsfreeze`
const fsfreeze_splitpath = ["sbin", "fsfreeze"]

# This will be filled out by __init__() for all products, as it must be done at runtime
fsfreeze_path = ""

# fsfreeze-specific global declaration
function fsfreeze(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(fsfreeze_path)
    end
end


# Relative path to `fstrim`
const fstrim_splitpath = ["sbin", "fstrim"]

# This will be filled out by __init__() for all products, as it must be done at runtime
fstrim_path = ""

# fstrim-specific global declaration
function fstrim(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(fstrim_path)
    end
end


# Relative path to `getopt`
const getopt_splitpath = ["bin", "getopt"]

# This will be filled out by __init__() for all products, as it must be done at runtime
getopt_path = ""

# getopt-specific global declaration
function getopt(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(getopt_path)
    end
end


# Relative path to `hardlink`
const hardlink_splitpath = ["bin", "hardlink"]

# This will be filled out by __init__() for all products, as it must be done at runtime
hardlink_path = ""

# hardlink-specific global declaration
function hardlink(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(hardlink_path)
    end
end


# Relative path to `hexdump`
const hexdump_splitpath = ["bin", "hexdump"]

# This will be filled out by __init__() for all products, as it must be done at runtime
hexdump_path = ""

# hexdump-specific global declaration
function hexdump(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(hexdump_path)
    end
end


# Relative path to `hwclock`
const hwclock_splitpath = ["sbin", "hwclock"]

# This will be filled out by __init__() for all products, as it must be done at runtime
hwclock_path = ""

# hwclock-specific global declaration
function hwclock(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(hwclock_path)
    end
end


# Relative path to `ionice`
const ionice_splitpath = ["bin", "ionice"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ionice_path = ""

# ionice-specific global declaration
function ionice(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ionice_path)
    end
end


# Relative path to `ipcmk`
const ipcmk_splitpath = ["bin", "ipcmk"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ipcmk_path = ""

# ipcmk-specific global declaration
function ipcmk(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ipcmk_path)
    end
end


# Relative path to `ipcrm`
const ipcrm_splitpath = ["bin", "ipcrm"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ipcrm_path = ""

# ipcrm-specific global declaration
function ipcrm(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ipcrm_path)
    end
end


# Relative path to `ipcs`
const ipcs_splitpath = ["bin", "ipcs"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ipcs_path = ""

# ipcs-specific global declaration
function ipcs(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ipcs_path)
    end
end


# Relative path to `isosize`
const isosize_splitpath = ["bin", "isosize"]

# This will be filled out by __init__() for all products, as it must be done at runtime
isosize_path = ""

# isosize-specific global declaration
function isosize(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(isosize_path)
    end
end


# Relative path to `kill_bin`
const kill_bin_splitpath = ["bin", "kill"]

# This will be filled out by __init__() for all products, as it must be done at runtime
kill_bin_path = ""

# kill_bin-specific global declaration
function kill_bin(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(kill_bin_path)
    end
end


# Relative path to `last_bin`
const last_bin_splitpath = ["bin", "last"]

# This will be filled out by __init__() for all products, as it must be done at runtime
last_bin_path = ""

# last_bin-specific global declaration
function last_bin(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(last_bin_path)
    end
end


# Relative path to `ldattach`
const ldattach_splitpath = ["sbin", "ldattach"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ldattach_path = ""

# ldattach-specific global declaration
function ldattach(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ldattach_path)
    end
end


# Relative path to `libblkid`
const libblkid_splitpath = ["lib", "libblkid.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libblkid_path = ""

# libblkid-specific global declaration
# This will be filled out by __init__()
libblkid_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libblkid = "libblkid.so.1"


# Relative path to `libfdisk`
const libfdisk_splitpath = ["lib", "libfdisk.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libfdisk_path = ""

# libfdisk-specific global declaration
# This will be filled out by __init__()
libfdisk_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libfdisk = "libfdisk.so.1"


# Relative path to `libmount`
const libmount_splitpath = ["lib", "libmount.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libmount_path = ""

# libmount-specific global declaration
# This will be filled out by __init__()
libmount_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libmount = "libmount.so.1"


# Relative path to `libsmartcols`
const libsmartcols_splitpath = ["lib", "libsmartcols.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libsmartcols_path = ""

# libsmartcols-specific global declaration
# This will be filled out by __init__()
libsmartcols_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libsmartcols = "libsmartcols.so.1"


# Relative path to `libuuid`
const libuuid_splitpath = ["lib", "libuuid.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libuuid_path = ""

# libuuid-specific global declaration
# This will be filled out by __init__()
libuuid_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libuuid = "libuuid.so.1"


# Relative path to `logger`
const logger_splitpath = ["bin", "logger"]

# This will be filled out by __init__() for all products, as it must be done at runtime
logger_path = ""

# logger-specific global declaration
function logger(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(logger_path)
    end
end


# Relative path to `look`
const look_splitpath = ["bin", "look"]

# This will be filled out by __init__() for all products, as it must be done at runtime
look_path = ""

# look-specific global declaration
function look(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(look_path)
    end
end


# Relative path to `losetup`
const losetup_splitpath = ["sbin", "losetup"]

# This will be filled out by __init__() for all products, as it must be done at runtime
losetup_path = ""

# losetup-specific global declaration
function losetup(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(losetup_path)
    end
end


# Relative path to `lsblk`
const lsblk_splitpath = ["bin", "lsblk"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lsblk_path = ""

# lsblk-specific global declaration
function lsblk(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lsblk_path)
    end
end


# Relative path to `lscpu`
const lscpu_splitpath = ["bin", "lscpu"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lscpu_path = ""

# lscpu-specific global declaration
function lscpu(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lscpu_path)
    end
end


# Relative path to `lsipc`
const lsipc_splitpath = ["bin", "lsipc"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lsipc_path = ""

# lsipc-specific global declaration
function lsipc(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lsipc_path)
    end
end


# Relative path to `lslocks`
const lslocks_splitpath = ["bin", "lslocks"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lslocks_path = ""

# lslocks-specific global declaration
function lslocks(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lslocks_path)
    end
end


# Relative path to `lslogins`
const lslogins_splitpath = ["bin", "lslogins"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lslogins_path = ""

# lslogins-specific global declaration
function lslogins(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lslogins_path)
    end
end


# Relative path to `lsmem`
const lsmem_splitpath = ["bin", "lsmem"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lsmem_path = ""

# lsmem-specific global declaration
function lsmem(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lsmem_path)
    end
end


# Relative path to `lsns`
const lsns_splitpath = ["bin", "lsns"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lsns_path = ""

# lsns-specific global declaration
function lsns(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lsns_path)
    end
end


# Relative path to `mcookie`
const mcookie_splitpath = ["bin", "mcookie"]

# This will be filled out by __init__() for all products, as it must be done at runtime
mcookie_path = ""

# mcookie-specific global declaration
function mcookie(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(mcookie_path)
    end
end


# Relative path to `mesg`
const mesg_splitpath = ["bin", "mesg"]

# This will be filled out by __init__() for all products, as it must be done at runtime
mesg_path = ""

# mesg-specific global declaration
function mesg(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(mesg_path)
    end
end


# Relative path to `mkfs`
const mkfs_splitpath = ["sbin", "mkfs"]

# This will be filled out by __init__() for all products, as it must be done at runtime
mkfs_path = ""

# mkfs-specific global declaration
function mkfs(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(mkfs_path)
    end
end


# Relative path to `mkfs_bfs`
const mkfs_bfs_splitpath = ["sbin", "mkfs.bfs"]

# This will be filled out by __init__() for all products, as it must be done at runtime
mkfs_bfs_path = ""

# mkfs_bfs-specific global declaration
function mkfs_bfs(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(mkfs_bfs_path)
    end
end


# Relative path to `mkfs_cramfs`
const mkfs_cramfs_splitpath = ["sbin", "mkfs.cramfs"]

# This will be filled out by __init__() for all products, as it must be done at runtime
mkfs_cramfs_path = ""

# mkfs_cramfs-specific global declaration
function mkfs_cramfs(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(mkfs_cramfs_path)
    end
end


# Relative path to `mkfs_minix`
const mkfs_minix_splitpath = ["sbin", "mkfs.minix"]

# This will be filled out by __init__() for all products, as it must be done at runtime
mkfs_minix_path = ""

# mkfs_minix-specific global declaration
function mkfs_minix(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(mkfs_minix_path)
    end
end


# Relative path to `mkswap`
const mkswap_splitpath = ["sbin", "mkswap"]

# This will be filled out by __init__() for all products, as it must be done at runtime
mkswap_path = ""

# mkswap-specific global declaration
function mkswap(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(mkswap_path)
    end
end


# Relative path to `mount`
const mount_splitpath = ["bin", "mount"]

# This will be filled out by __init__() for all products, as it must be done at runtime
mount_path = ""

# mount-specific global declaration
function mount(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(mount_path)
    end
end


# Relative path to `mountpoint`
const mountpoint_splitpath = ["bin", "mountpoint"]

# This will be filled out by __init__() for all products, as it must be done at runtime
mountpoint_path = ""

# mountpoint-specific global declaration
function mountpoint(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(mountpoint_path)
    end
end


# Relative path to `namei`
const namei_splitpath = ["bin", "namei"]

# This will be filled out by __init__() for all products, as it must be done at runtime
namei_path = ""

# namei-specific global declaration
function namei(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(namei_path)
    end
end


# Relative path to `nologin`
const nologin_splitpath = ["sbin", "nologin"]

# This will be filled out by __init__() for all products, as it must be done at runtime
nologin_path = ""

# nologin-specific global declaration
function nologin(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(nologin_path)
    end
end


# Relative path to `nsenter`
const nsenter_splitpath = ["bin", "nsenter"]

# This will be filled out by __init__() for all products, as it must be done at runtime
nsenter_path = ""

# nsenter-specific global declaration
function nsenter(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(nsenter_path)
    end
end


# Relative path to `partx`
const partx_splitpath = ["sbin", "partx"]

# This will be filled out by __init__() for all products, as it must be done at runtime
partx_path = ""

# partx-specific global declaration
function partx(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(partx_path)
    end
end


# Relative path to `pivot_root`
const pivot_root_splitpath = ["sbin", "pivot_root"]

# This will be filled out by __init__() for all products, as it must be done at runtime
pivot_root_path = ""

# pivot_root-specific global declaration
function pivot_root(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(pivot_root_path)
    end
end


# Relative path to `prlimit`
const prlimit_splitpath = ["bin", "prlimit"]

# This will be filled out by __init__() for all products, as it must be done at runtime
prlimit_path = ""

# prlimit-specific global declaration
function prlimit(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(prlimit_path)
    end
end


# Relative path to `raw`
const raw_splitpath = ["sbin", "raw"]

# This will be filled out by __init__() for all products, as it must be done at runtime
raw_path = ""

# raw-specific global declaration
function raw(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(raw_path)
    end
end


# Relative path to `readprofile`
const readprofile_splitpath = ["sbin", "readprofile"]

# This will be filled out by __init__() for all products, as it must be done at runtime
readprofile_path = ""

# readprofile-specific global declaration
function readprofile(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(readprofile_path)
    end
end


# Relative path to `rename_bin`
const rename_bin_splitpath = ["bin", "rename"]

# This will be filled out by __init__() for all products, as it must be done at runtime
rename_bin_path = ""

# rename_bin-specific global declaration
function rename_bin(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(rename_bin_path)
    end
end


# Relative path to `renice`
const renice_splitpath = ["bin", "renice"]

# This will be filled out by __init__() for all products, as it must be done at runtime
renice_path = ""

# renice-specific global declaration
function renice(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(renice_path)
    end
end


# Relative path to `resizepart`
const resizepart_splitpath = ["sbin", "resizepart"]

# This will be filled out by __init__() for all products, as it must be done at runtime
resizepart_path = ""

# resizepart-specific global declaration
function resizepart(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(resizepart_path)
    end
end


# Relative path to `rev`
const rev_splitpath = ["bin", "rev"]

# This will be filled out by __init__() for all products, as it must be done at runtime
rev_path = ""

# rev-specific global declaration
function rev(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(rev_path)
    end
end


# Relative path to `rfkill`
const rfkill_splitpath = ["sbin", "rfkill"]

# This will be filled out by __init__() for all products, as it must be done at runtime
rfkill_path = ""

# rfkill-specific global declaration
function rfkill(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(rfkill_path)
    end
end


# Relative path to `rtcwake`
const rtcwake_splitpath = ["sbin", "rtcwake"]

# This will be filled out by __init__() for all products, as it must be done at runtime
rtcwake_path = ""

# rtcwake-specific global declaration
function rtcwake(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(rtcwake_path)
    end
end


# Relative path to `script`
const script_splitpath = ["bin", "script"]

# This will be filled out by __init__() for all products, as it must be done at runtime
script_path = ""

# script-specific global declaration
function script(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(script_path)
    end
end


# Relative path to `scriptlive`
const scriptlive_splitpath = ["bin", "scriptlive"]

# This will be filled out by __init__() for all products, as it must be done at runtime
scriptlive_path = ""

# scriptlive-specific global declaration
function scriptlive(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(scriptlive_path)
    end
end


# Relative path to `scriptreplay`
const scriptreplay_splitpath = ["bin", "scriptreplay"]

# This will be filled out by __init__() for all products, as it must be done at runtime
scriptreplay_path = ""

# scriptreplay-specific global declaration
function scriptreplay(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(scriptreplay_path)
    end
end


# Relative path to `setarch`
const setarch_splitpath = ["bin", "setarch"]

# This will be filled out by __init__() for all products, as it must be done at runtime
setarch_path = ""

# setarch-specific global declaration
function setarch(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(setarch_path)
    end
end


# Relative path to `setsid`
const setsid_splitpath = ["bin", "setsid"]

# This will be filled out by __init__() for all products, as it must be done at runtime
setsid_path = ""

# setsid-specific global declaration
function setsid(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(setsid_path)
    end
end


# Relative path to `sfdisk`
const sfdisk_splitpath = ["sbin", "sfdisk"]

# This will be filled out by __init__() for all products, as it must be done at runtime
sfdisk_path = ""

# sfdisk-specific global declaration
function sfdisk(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(sfdisk_path)
    end
end


# Relative path to `sulogin`
const sulogin_splitpath = ["sbin", "sulogin"]

# This will be filled out by __init__() for all products, as it must be done at runtime
sulogin_path = ""

# sulogin-specific global declaration
function sulogin(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(sulogin_path)
    end
end


# Relative path to `swaplabel`
const swaplabel_splitpath = ["sbin", "swaplabel"]

# This will be filled out by __init__() for all products, as it must be done at runtime
swaplabel_path = ""

# swaplabel-specific global declaration
function swaplabel(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(swaplabel_path)
    end
end


# Relative path to `swapoff`
const swapoff_splitpath = ["sbin", "swapoff"]

# This will be filled out by __init__() for all products, as it must be done at runtime
swapoff_path = ""

# swapoff-specific global declaration
function swapoff(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(swapoff_path)
    end
end


# Relative path to `swapon`
const swapon_splitpath = ["sbin", "swapon"]

# This will be filled out by __init__() for all products, as it must be done at runtime
swapon_path = ""

# swapon-specific global declaration
function swapon(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(swapon_path)
    end
end


# Relative path to `switch_root`
const switch_root_splitpath = ["sbin", "switch_root"]

# This will be filled out by __init__() for all products, as it must be done at runtime
switch_root_path = ""

# switch_root-specific global declaration
function switch_root(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(switch_root_path)
    end
end


# Relative path to `taskset`
const taskset_splitpath = ["bin", "taskset"]

# This will be filled out by __init__() for all products, as it must be done at runtime
taskset_path = ""

# taskset-specific global declaration
function taskset(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(taskset_path)
    end
end


# Relative path to `umount`
const umount_splitpath = ["bin", "umount"]

# This will be filled out by __init__() for all products, as it must be done at runtime
umount_path = ""

# umount-specific global declaration
function umount(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(umount_path)
    end
end


# Relative path to `unshare`
const unshare_splitpath = ["bin", "unshare"]

# This will be filled out by __init__() for all products, as it must be done at runtime
unshare_path = ""

# unshare-specific global declaration
function unshare(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(unshare_path)
    end
end


# Relative path to `utmpdump`
const utmpdump_splitpath = ["bin", "utmpdump"]

# This will be filled out by __init__() for all products, as it must be done at runtime
utmpdump_path = ""

# utmpdump-specific global declaration
function utmpdump(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(utmpdump_path)
    end
end


# Relative path to `uuidd`
const uuidd_splitpath = ["sbin", "uuidd"]

# This will be filled out by __init__() for all products, as it must be done at runtime
uuidd_path = ""

# uuidd-specific global declaration
function uuidd(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(uuidd_path)
    end
end


# Relative path to `uuidgen`
const uuidgen_splitpath = ["bin", "uuidgen"]

# This will be filled out by __init__() for all products, as it must be done at runtime
uuidgen_path = ""

# uuidgen-specific global declaration
function uuidgen(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(uuidgen_path)
    end
end


# Relative path to `uuidparse`
const uuidparse_splitpath = ["bin", "uuidparse"]

# This will be filled out by __init__() for all products, as it must be done at runtime
uuidparse_path = ""

# uuidparse-specific global declaration
function uuidparse(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(uuidparse_path)
    end
end


# Relative path to `wall`
const wall_splitpath = ["bin", "wall"]

# This will be filled out by __init__() for all products, as it must be done at runtime
wall_path = ""

# wall-specific global declaration
function wall(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(wall_path)
    end
end


# Relative path to `wdctl`
const wdctl_splitpath = ["bin", "wdctl"]

# This will be filled out by __init__() for all products, as it must be done at runtime
wdctl_path = ""

# wdctl-specific global declaration
function wdctl(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(wdctl_path)
    end
end


# Relative path to `whereis`
const whereis_splitpath = ["bin", "whereis"]

# This will be filled out by __init__() for all products, as it must be done at runtime
whereis_path = ""

# whereis-specific global declaration
function whereis(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(whereis_path)
    end
end


# Relative path to `wipefs`
const wipefs_splitpath = ["sbin", "wipefs"]

# This will be filled out by __init__() for all products, as it must be done at runtime
wipefs_path = ""

# wipefs-specific global declaration
function wipefs(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(wipefs_path)
    end
end


# Relative path to `zramctl`
const zramctl_splitpath = ["sbin", "zramctl"]

# This will be filled out by __init__() for all products, as it must be done at runtime
zramctl_path = ""

# zramctl-specific global declaration
function zramctl(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(zramctl_path)
    end
end


# Inform that the wrapper is available for this platform
wrapper_available = true

"""
Open all libraries
"""
function __init__()
    # This either calls `@artifact_str()`, or returns a constant string if we're overridden.
    global artifact_dir = find_artifact_dir()

    global PATH_list, LIBPATH_list
    # Initialize PATH and LIBPATH environment variable listings
    # From the list of our dependencies, generate a tuple of all the PATH and LIBPATH lists,
    # then append them to our own.
    foreach(p -> append!(PATH_list, p), (Gettext_jll.PATH_list, Zlib_jll.PATH_list,))
    foreach(p -> append!(LIBPATH_list, p), (Gettext_jll.LIBPATH_list, Zlib_jll.LIBPATH_list,))

    global addpart_path = normpath(joinpath(artifact_dir, addpart_splitpath...))

    push!(PATH_list, dirname(addpart_path))
    global agetty_path = normpath(joinpath(artifact_dir, agetty_splitpath...))

    push!(PATH_list, dirname(agetty_path))
    global blkdiscard_path = normpath(joinpath(artifact_dir, blkdiscard_splitpath...))

    push!(PATH_list, dirname(blkdiscard_path))
    global blkid_path = normpath(joinpath(artifact_dir, blkid_splitpath...))

    push!(PATH_list, dirname(blkid_path))
    global blkzone_path = normpath(joinpath(artifact_dir, blkzone_splitpath...))

    push!(PATH_list, dirname(blkzone_path))
    global blockdev_path = normpath(joinpath(artifact_dir, blockdev_splitpath...))

    push!(PATH_list, dirname(blockdev_path))
    global cal_path = normpath(joinpath(artifact_dir, cal_splitpath...))

    push!(PATH_list, dirname(cal_path))
    global chcpu_path = normpath(joinpath(artifact_dir, chcpu_splitpath...))

    push!(PATH_list, dirname(chcpu_path))
    global chmem_path = normpath(joinpath(artifact_dir, chmem_splitpath...))

    push!(PATH_list, dirname(chmem_path))
    global choom_path = normpath(joinpath(artifact_dir, choom_splitpath...))

    push!(PATH_list, dirname(choom_path))
    global chrt_path = normpath(joinpath(artifact_dir, chrt_splitpath...))

    push!(PATH_list, dirname(chrt_path))
    global col_path = normpath(joinpath(artifact_dir, col_splitpath...))

    push!(PATH_list, dirname(col_path))
    global colcrt_path = normpath(joinpath(artifact_dir, colcrt_splitpath...))

    push!(PATH_list, dirname(colcrt_path))
    global colrm_path = normpath(joinpath(artifact_dir, colrm_splitpath...))

    push!(PATH_list, dirname(colrm_path))
    global column_path = normpath(joinpath(artifact_dir, column_splitpath...))

    push!(PATH_list, dirname(column_path))
    global ctrlaltdel_path = normpath(joinpath(artifact_dir, ctrlaltdel_splitpath...))

    push!(PATH_list, dirname(ctrlaltdel_path))
    global delpart_path = normpath(joinpath(artifact_dir, delpart_splitpath...))

    push!(PATH_list, dirname(delpart_path))
    global dmesg_path = normpath(joinpath(artifact_dir, dmesg_splitpath...))

    push!(PATH_list, dirname(dmesg_path))
    global eject_path = normpath(joinpath(artifact_dir, eject_splitpath...))

    push!(PATH_list, dirname(eject_path))
    global fallocate_path = normpath(joinpath(artifact_dir, fallocate_splitpath...))

    push!(PATH_list, dirname(fallocate_path))
    global fdformat_path = normpath(joinpath(artifact_dir, fdformat_splitpath...))

    push!(PATH_list, dirname(fdformat_path))
    global fdisk_path = normpath(joinpath(artifact_dir, fdisk_splitpath...))

    push!(PATH_list, dirname(fdisk_path))
    global fincore_path = normpath(joinpath(artifact_dir, fincore_splitpath...))

    push!(PATH_list, dirname(fincore_path))
    global findfs_path = normpath(joinpath(artifact_dir, findfs_splitpath...))

    push!(PATH_list, dirname(findfs_path))
    global findmnt_path = normpath(joinpath(artifact_dir, findmnt_splitpath...))

    push!(PATH_list, dirname(findmnt_path))
    global flock_path = normpath(joinpath(artifact_dir, flock_splitpath...))

    push!(PATH_list, dirname(flock_path))
    global fsck_path = normpath(joinpath(artifact_dir, fsck_splitpath...))

    push!(PATH_list, dirname(fsck_path))
    global fsck_cramfs_path = normpath(joinpath(artifact_dir, fsck_cramfs_splitpath...))

    push!(PATH_list, dirname(fsck_cramfs_path))
    global fsck_minix_path = normpath(joinpath(artifact_dir, fsck_minix_splitpath...))

    push!(PATH_list, dirname(fsck_minix_path))
    global fsfreeze_path = normpath(joinpath(artifact_dir, fsfreeze_splitpath...))

    push!(PATH_list, dirname(fsfreeze_path))
    global fstrim_path = normpath(joinpath(artifact_dir, fstrim_splitpath...))

    push!(PATH_list, dirname(fstrim_path))
    global getopt_path = normpath(joinpath(artifact_dir, getopt_splitpath...))

    push!(PATH_list, dirname(getopt_path))
    global hardlink_path = normpath(joinpath(artifact_dir, hardlink_splitpath...))

    push!(PATH_list, dirname(hardlink_path))
    global hexdump_path = normpath(joinpath(artifact_dir, hexdump_splitpath...))

    push!(PATH_list, dirname(hexdump_path))
    global hwclock_path = normpath(joinpath(artifact_dir, hwclock_splitpath...))

    push!(PATH_list, dirname(hwclock_path))
    global ionice_path = normpath(joinpath(artifact_dir, ionice_splitpath...))

    push!(PATH_list, dirname(ionice_path))
    global ipcmk_path = normpath(joinpath(artifact_dir, ipcmk_splitpath...))

    push!(PATH_list, dirname(ipcmk_path))
    global ipcrm_path = normpath(joinpath(artifact_dir, ipcrm_splitpath...))

    push!(PATH_list, dirname(ipcrm_path))
    global ipcs_path = normpath(joinpath(artifact_dir, ipcs_splitpath...))

    push!(PATH_list, dirname(ipcs_path))
    global isosize_path = normpath(joinpath(artifact_dir, isosize_splitpath...))

    push!(PATH_list, dirname(isosize_path))
    global kill_bin_path = normpath(joinpath(artifact_dir, kill_bin_splitpath...))

    push!(PATH_list, dirname(kill_bin_path))
    global last_bin_path = normpath(joinpath(artifact_dir, last_bin_splitpath...))

    push!(PATH_list, dirname(last_bin_path))
    global ldattach_path = normpath(joinpath(artifact_dir, ldattach_splitpath...))

    push!(PATH_list, dirname(ldattach_path))
    global libblkid_path = normpath(joinpath(artifact_dir, libblkid_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libblkid_handle = dlopen(libblkid_path, RTLD_LAZY | RTLD_DEEPBIND)
    push!(LIBPATH_list, dirname(libblkid_path))

    global libfdisk_path = normpath(joinpath(artifact_dir, libfdisk_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libfdisk_handle = dlopen(libfdisk_path, RTLD_LAZY | RTLD_DEEPBIND)
    push!(LIBPATH_list, dirname(libfdisk_path))

    global libmount_path = normpath(joinpath(artifact_dir, libmount_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libmount_handle = dlopen(libmount_path, RTLD_LAZY | RTLD_DEEPBIND)
    push!(LIBPATH_list, dirname(libmount_path))

    global libsmartcols_path = normpath(joinpath(artifact_dir, libsmartcols_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libsmartcols_handle = dlopen(libsmartcols_path, RTLD_LAZY | RTLD_DEEPBIND)
    push!(LIBPATH_list, dirname(libsmartcols_path))

    global libuuid_path = normpath(joinpath(artifact_dir, libuuid_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libuuid_handle = dlopen(libuuid_path, RTLD_LAZY | RTLD_DEEPBIND)
    push!(LIBPATH_list, dirname(libuuid_path))

    global logger_path = normpath(joinpath(artifact_dir, logger_splitpath...))

    push!(PATH_list, dirname(logger_path))
    global look_path = normpath(joinpath(artifact_dir, look_splitpath...))

    push!(PATH_list, dirname(look_path))
    global losetup_path = normpath(joinpath(artifact_dir, losetup_splitpath...))

    push!(PATH_list, dirname(losetup_path))
    global lsblk_path = normpath(joinpath(artifact_dir, lsblk_splitpath...))

    push!(PATH_list, dirname(lsblk_path))
    global lscpu_path = normpath(joinpath(artifact_dir, lscpu_splitpath...))

    push!(PATH_list, dirname(lscpu_path))
    global lsipc_path = normpath(joinpath(artifact_dir, lsipc_splitpath...))

    push!(PATH_list, dirname(lsipc_path))
    global lslocks_path = normpath(joinpath(artifact_dir, lslocks_splitpath...))

    push!(PATH_list, dirname(lslocks_path))
    global lslogins_path = normpath(joinpath(artifact_dir, lslogins_splitpath...))

    push!(PATH_list, dirname(lslogins_path))
    global lsmem_path = normpath(joinpath(artifact_dir, lsmem_splitpath...))

    push!(PATH_list, dirname(lsmem_path))
    global lsns_path = normpath(joinpath(artifact_dir, lsns_splitpath...))

    push!(PATH_list, dirname(lsns_path))
    global mcookie_path = normpath(joinpath(artifact_dir, mcookie_splitpath...))

    push!(PATH_list, dirname(mcookie_path))
    global mesg_path = normpath(joinpath(artifact_dir, mesg_splitpath...))

    push!(PATH_list, dirname(mesg_path))
    global mkfs_path = normpath(joinpath(artifact_dir, mkfs_splitpath...))

    push!(PATH_list, dirname(mkfs_path))
    global mkfs_bfs_path = normpath(joinpath(artifact_dir, mkfs_bfs_splitpath...))

    push!(PATH_list, dirname(mkfs_bfs_path))
    global mkfs_cramfs_path = normpath(joinpath(artifact_dir, mkfs_cramfs_splitpath...))

    push!(PATH_list, dirname(mkfs_cramfs_path))
    global mkfs_minix_path = normpath(joinpath(artifact_dir, mkfs_minix_splitpath...))

    push!(PATH_list, dirname(mkfs_minix_path))
    global mkswap_path = normpath(joinpath(artifact_dir, mkswap_splitpath...))

    push!(PATH_list, dirname(mkswap_path))
    global mount_path = normpath(joinpath(artifact_dir, mount_splitpath...))

    push!(PATH_list, dirname(mount_path))
    global mountpoint_path = normpath(joinpath(artifact_dir, mountpoint_splitpath...))

    push!(PATH_list, dirname(mountpoint_path))
    global namei_path = normpath(joinpath(artifact_dir, namei_splitpath...))

    push!(PATH_list, dirname(namei_path))
    global nologin_path = normpath(joinpath(artifact_dir, nologin_splitpath...))

    push!(PATH_list, dirname(nologin_path))
    global nsenter_path = normpath(joinpath(artifact_dir, nsenter_splitpath...))

    push!(PATH_list, dirname(nsenter_path))
    global partx_path = normpath(joinpath(artifact_dir, partx_splitpath...))

    push!(PATH_list, dirname(partx_path))
    global pivot_root_path = normpath(joinpath(artifact_dir, pivot_root_splitpath...))

    push!(PATH_list, dirname(pivot_root_path))
    global prlimit_path = normpath(joinpath(artifact_dir, prlimit_splitpath...))

    push!(PATH_list, dirname(prlimit_path))
    global raw_path = normpath(joinpath(artifact_dir, raw_splitpath...))

    push!(PATH_list, dirname(raw_path))
    global readprofile_path = normpath(joinpath(artifact_dir, readprofile_splitpath...))

    push!(PATH_list, dirname(readprofile_path))
    global rename_bin_path = normpath(joinpath(artifact_dir, rename_bin_splitpath...))

    push!(PATH_list, dirname(rename_bin_path))
    global renice_path = normpath(joinpath(artifact_dir, renice_splitpath...))

    push!(PATH_list, dirname(renice_path))
    global resizepart_path = normpath(joinpath(artifact_dir, resizepart_splitpath...))

    push!(PATH_list, dirname(resizepart_path))
    global rev_path = normpath(joinpath(artifact_dir, rev_splitpath...))

    push!(PATH_list, dirname(rev_path))
    global rfkill_path = normpath(joinpath(artifact_dir, rfkill_splitpath...))

    push!(PATH_list, dirname(rfkill_path))
    global rtcwake_path = normpath(joinpath(artifact_dir, rtcwake_splitpath...))

    push!(PATH_list, dirname(rtcwake_path))
    global script_path = normpath(joinpath(artifact_dir, script_splitpath...))

    push!(PATH_list, dirname(script_path))
    global scriptlive_path = normpath(joinpath(artifact_dir, scriptlive_splitpath...))

    push!(PATH_list, dirname(scriptlive_path))
    global scriptreplay_path = normpath(joinpath(artifact_dir, scriptreplay_splitpath...))

    push!(PATH_list, dirname(scriptreplay_path))
    global setarch_path = normpath(joinpath(artifact_dir, setarch_splitpath...))

    push!(PATH_list, dirname(setarch_path))
    global setsid_path = normpath(joinpath(artifact_dir, setsid_splitpath...))

    push!(PATH_list, dirname(setsid_path))
    global sfdisk_path = normpath(joinpath(artifact_dir, sfdisk_splitpath...))

    push!(PATH_list, dirname(sfdisk_path))
    global sulogin_path = normpath(joinpath(artifact_dir, sulogin_splitpath...))

    push!(PATH_list, dirname(sulogin_path))
    global swaplabel_path = normpath(joinpath(artifact_dir, swaplabel_splitpath...))

    push!(PATH_list, dirname(swaplabel_path))
    global swapoff_path = normpath(joinpath(artifact_dir, swapoff_splitpath...))

    push!(PATH_list, dirname(swapoff_path))
    global swapon_path = normpath(joinpath(artifact_dir, swapon_splitpath...))

    push!(PATH_list, dirname(swapon_path))
    global switch_root_path = normpath(joinpath(artifact_dir, switch_root_splitpath...))

    push!(PATH_list, dirname(switch_root_path))
    global taskset_path = normpath(joinpath(artifact_dir, taskset_splitpath...))

    push!(PATH_list, dirname(taskset_path))
    global umount_path = normpath(joinpath(artifact_dir, umount_splitpath...))

    push!(PATH_list, dirname(umount_path))
    global unshare_path = normpath(joinpath(artifact_dir, unshare_splitpath...))

    push!(PATH_list, dirname(unshare_path))
    global utmpdump_path = normpath(joinpath(artifact_dir, utmpdump_splitpath...))

    push!(PATH_list, dirname(utmpdump_path))
    global uuidd_path = normpath(joinpath(artifact_dir, uuidd_splitpath...))

    push!(PATH_list, dirname(uuidd_path))
    global uuidgen_path = normpath(joinpath(artifact_dir, uuidgen_splitpath...))

    push!(PATH_list, dirname(uuidgen_path))
    global uuidparse_path = normpath(joinpath(artifact_dir, uuidparse_splitpath...))

    push!(PATH_list, dirname(uuidparse_path))
    global wall_path = normpath(joinpath(artifact_dir, wall_splitpath...))

    push!(PATH_list, dirname(wall_path))
    global wdctl_path = normpath(joinpath(artifact_dir, wdctl_splitpath...))

    push!(PATH_list, dirname(wdctl_path))
    global whereis_path = normpath(joinpath(artifact_dir, whereis_splitpath...))

    push!(PATH_list, dirname(whereis_path))
    global wipefs_path = normpath(joinpath(artifact_dir, wipefs_splitpath...))

    push!(PATH_list, dirname(wipefs_path))
    global zramctl_path = normpath(joinpath(artifact_dir, zramctl_splitpath...))

    push!(PATH_list, dirname(zramctl_path))
    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(vcat(LIBPATH_list, [joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)]), ':')

    
end  # __init__()
